##################################################
#  Core Classes: Move from .G to .INI
##################################################

####################
#  Class creation and basic protocol messages
#     These need to be migrated into the correct scripts
####################

####################
#  Create Core Classes that have been migrated out of investcore
####################

#--------------------
#  Entity subclasses
#--------------------
Entity createSubclass: "Currency" ;

Entity createSubclass: "Classification" ;
Classification createSubclass: "RangeClassification" ;

Entity createSubclass: "Universe" ;

Entity createSubclass: "Table" ;
Entity createSubclass: "Support" ;

#--------------------
#  Support Tables
#--------------------
Support createSubclass: "DataItem" ;
Support createSubclass: "DataAccessPath" ;
Support createSubclass: "IdSource" ;

#--------------------
#  Alternative XRef dictionaries for entities
#--------------------
Dictionary createSubclass: "XRef" ;
XRef define: "Default" toBe: Entity ;

#--------------------
#  VendorEntity subclass
#--------------------
Entity createSubclass: "VendorEntity" at: CoreWorkspace ;

#--------------------
#  Other Application Class Roots
#--------------------

#----------
#  DataRecord
#     New Subclasses should always be in a new store - 
#     the default instances of the default class will be in the main chain
#----------
Object createSubclass: "DataRecord" ;

DataRecord defineMethod: [ | initializeGlobalSubclassProperties |
^super initializeGlobalSubclassProperties ;
!newClass <- ^self asSelf ;
newClass define: 'storeXRef' toBe: newClass asList; 
^self define: 'currentStore' toBe: newClass; 
newClass 
do: [:entity <- ^global Entity; 
    :baseCurrency <- ^global Currency; 
    :recordDate <- earliestPossibleDate; 
   ]; 
newClass
] ;

#----------
#  LinkRecord
#    auto create class constants for subclasses
#----------
Object createSubclass: "LinkRecord" ;

LinkRecord defineMethod: [ | initializeGlobalSubclassProperties | 
  ^super initializeGlobalSubclassProperties ;
  ^self define: 'keyList' toBe: ^global List new ;
  ^self define: 'updateBlocks' toBe: ^global List new ;
  ^self
] ;

#----------
#  Bridge
#----------
Object createSubclass: "Bridge" ;

#--------------------
#  Bridge subclass initializations
#--------------------

Bridge
   define: 'updateBlock' toBe: NA .
   define: 'baseClass' toBe: Entity .

   defineFixedProperty: 'underlyingObject' .
   defineFixedProperty: 'baseEntity' .
;

Bridge defineMethod: [ | initializeGlobalSubclassProperties |
  ^super initializeGlobalSubclassProperties ;
  :underlyingObject <- ^self baseClass ;
  :baseEntity <- ^self baseClass ;
  ^self
] ;

Bridge :underlyingObject <- Entity ;
Bridge :baseEntity <- Entity ;


#--------------------
#  LocalEntity
#--------------------
Bridge createSubclass: "LocalEntity" at: CoreWorkspace ;

#======================================================================

####################
#  Properties and initializations
####################

#--------------------
#  Object.bi
#--------------------
Object respondsTo: "baseCurrency" .
   ifFalse: [ Object defineFixedProperty: 'baseCurrency' ] ;
;

#--------------------
#  XRef
#--------------------

XRef
   defineFixedProperty: 'updateBlock' .
;

Entity
   define: "XRef" toBe: XRef .
;

Entity defineMethod: [ | createNewXRefManager | 
   !newXRef <- XRef createSubclass: "XRef" at: ^self ;
   newXRef define: 'Default' toBe: ^self named ;
  newXRef
] ;

#-- minimally setup Currency XRef Default == Named Curency 
Currency createNewXRefManager ;

#--------------------
#  Currency
#--------------------
Currency
   defineFixedProperty: 'underlyingCurrency' .       #- e.g., cents -> dollars
   defineFixedProperty: 'underlyingExchange' .       #- e.g., / 100
   define: 'usExchange' .
   defineFixedProperty: 'fixedRateToEuro' .
;

Currency defineMethod: [ | initialize | 
  ^super initialize ; 
  ^self :underlyingCurrency <- ^self ; 
  ^self :underlyingExchange <- 1.0 ;
#--  ^self :usExchange <- 1.0 ;     #-- let it stay at NA
  ^self
] ;

Currency initialize ;

Currency createInstance: "USD" .
  addAlias: "US" .
  addAlias: "USA" .
  setNameTo: "US Dollar" ;
Named Currency USD :usExchange <- 1.0 ;

Currency createInstance: "CAD" .
  addAlias: "CAN" .
  setNameTo: "Canadian Dollar" ;

Currency createInstance: "EUR" .
  setNameTo: "Euro Dollar" ;

Currency createInstance: "LEGACY" ;

Currency
  defineMethod: [ | isUS | code = "USD" ] .
  defineMethod: [ | isUSA | code = "USD" ] .
  defineMethod: [ | isCanadian | code = "CAD" ] .
  defineMethod: [ | isEuro | code = "EUR" ] .
  defineMethod: [ | isLegacy | code = "LEGACY" ] .
;

#--------------------
#  Classification Class
#--------------------
Classification
   defineFixedProperty: 'parent' .
   defineFixedProperty: 'childList' .
   define: 'memberList' .
;

Classification instanceList
do: [ :memberList <- ^global IndexedList new ;
      :childList <- ^global IndexedList new ;
      :parent <- ^self asBaseObject ;
    ] ;

RangeClassification
  defineFixedProperty: 'lowerBound' .
  defineFixedProperty: 'upperBound' .
  defineFixedProperty: 'rangeName' .
;

#--------------------
#  Universe Class
#--------------------
Universe
   defineFixedProperty: 'entityType' .
   define: 'list' .
   defineFixedProperty: 'criteriaBlock' .
;

Universe
do: [ :list <- ^global IndexedList new ;
      :entityType <- ^global Entity ;
    ] ;

#--------------------
#  DataItem and DataAccessPath
#--------------------
DataItem
   defineFixedProperty: 'baseClass' .
   defineFixedProperty: 'accessPath' .
   defineFixedProperty: 'isGroup' withDefault: FALSE .
   defineFixedProperty: 'isStat'  withDefault: FALSE .
   defineFixedProperty: 'inProfile' withDefault: FALSE .
;

DataAccessPath
   defineFixedProperty: 'fromClass' .
   defineFixedProperty: 'toClass' .
   defineFixedProperty: 'via' .
;

#--------------------
#  DataRecord
#--------------------
DataRecord
   defineFixedProperty: 'entity' .
   defineFixedProperty: 'recordValue' .
   defineFixedProperty: 'recordDate' .
;

DataRecord 
do: [ :entity <- ^global Entity ;
      :recordDate <- earliestPossibleDate ;
      :baseCurrency <- ^global Currency ;
    ] ;

#======================================================================

#--------------------
#  Estimates
#--------------------

Bridge createSubclass: "EstimateBridge" at: CoreWorkspace ;

DataRecord createSubclass: "EstimateRecord" at: CoreWorkspace ;

EstimateRecord defineMethod: [ | initializeGlobalSubclassProperties |
  ^super initializeGlobalSubclassProperties ; 
  :entity <- ^global EstimateBridge ;
  ^self
] ;
EstimateRecord :entity <- EstimateBridge ;

EstimateRecord createSubclass: "AnalystEstimateRecord" at: CoreWorkspace ;
#-- "... remember to delete current AnalystEstimate from bootstrap" printNL ;
EstimateRecord createSubclass: "ConsensusEstimateRecord" at: CoreWorkspace ;

EstimateBridge
   define: 'observation' withDefault: EstimateRecord .
   define: 'actualRecord' withDefault: EstimateRecord .
;

EstimateBridge defineMethod: [ | initializeGlobalSubclassProperties |
  ^super initializeGlobalSubclassProperties ; 
  :observation <- ^self super defaultInstance observation ;
  :actualRecord <- observation ;
  ^self
] ;

####################
#  Create separate classes for Summary and Detail Estimate Bridges
####################
EstimateBridge createSubclass: "SummaryEstimateBridge" at: CoreWorkspace ;
EstimateBridge createSubclass: "DetailEstimateBridge" at: CoreWorkspace ;


#======================================================================

#--------------------
#  post messages
#--------------------
Schema processAllMessages;


